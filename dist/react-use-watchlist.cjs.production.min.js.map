{"version":3,"file":"react-use-watchlist.cjs.production.min.js","sources":["../src/useLocalStorage.ts","../src/index.tsx"],"sourcesContent":["import * as React from \"react\";\r\n\r\nexport default function useLocalStorage(\r\n  key: string,\r\n  initialValue: string\r\n): [string, (value: Function | string) => void] {\r\n  const [storedValue, setStoredValue] = React.useState(() => {\r\n    try {\r\n      const item =\r\n        typeof window !== \"undefined\" && window.localStorage.getItem(key);\r\n\r\n      return item ? item : initialValue;\r\n    } catch (error) {\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  const setValue = (value: Function | string) => {\r\n    try {\r\n      const valueToStore =\r\n        value instanceof Function ? value(storedValue) : value;\r\n\r\n      setStoredValue(valueToStore);\r\n\r\n      window.localStorage.setItem(key, valueToStore);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n}\r\n","import * as React from \"react\";\r\n\r\nimport useLocalStorage from \"./useLocalStorage\";\r\n\r\nexport interface Item {\r\n  id: string;\r\n  price: number;\r\n  quantity?: number;\r\n  itemTotal?: number;\r\n  [key: string]: any;\r\n}\r\n\r\ninterface InitialState {\r\n  id: string;\r\n  items: Item[];\r\n  isEmpty: boolean;\r\n  totalItems: number;\r\n  totalUniqueItems: number;\r\n  //cartTotal: number;\r\n  metadata?: Metadata;\r\n}\r\n\r\nexport interface Metadata {\r\n  [key: string]: any;\r\n}\r\n\r\ninterface WatchlistProviderState extends InitialState {\r\n  addItem: (item: Item, quantity?: number) => void;\r\n  removeItem: (id: Item[\"id\"]) => void;\r\n  updateItem: (id: Item[\"id\"], payload: object) => void;\r\n  setItems: (items: Item[]) => void;\r\n  updateItemQuantity: (id: Item[\"id\"], quantity: number) => void;\r\n  emptyWatchlist: () => void;\r\n  getItem: (id: Item[\"id\"]) => any | undefined;\r\n  inWatchlist: (id: Item[\"id\"]) => boolean;\r\n  clearWatchlistMetadata: () => void;\r\n  setWatchlistMetadata: (metadata: Metadata) => void;\r\n  updateWatchlistMetadata: (metadata: Metadata) => void;\r\n}\r\n\r\nexport type Actions =\r\n  | { type: \"SET_ITEMS\"; payload: Item[] }\r\n  | { type: \"ADD_ITEM\"; payload: Item }\r\n  | { type: \"REMOVE_ITEM\"; id: Item[\"id\"] }\r\n  | {\r\n      type: \"UPDATE_ITEM\";\r\n      id: Item[\"id\"];\r\n      payload: object;\r\n    }\r\n  | { type: \"EMPTY_WATCHLIST\" }\r\n  | { type: \"CLEAR_WATCHLIST_META\" }\r\n  | { type: \"SET_WATCHLIST_META\"; payload: Metadata }\r\n  | { type: \"UPDATE_WATCHLIST_META\"; payload: Metadata };\r\n\r\nexport const initialState: any = {\r\n  items: [],\r\n  isEmpty: true,\r\n  totalItems: 0,\r\n  totalUniqueItems: 0,\r\n  //cartTotal: 0,\r\n  metadata: {},\r\n};\r\n\r\nconst WatchlistContext = React.createContext<WatchlistProviderState | undefined>(\r\n  initialState\r\n);\r\n\r\nexport const createWatchlistIdentifier = (len = 12) =>\r\n  [...Array(len)].map(() => (~~(Math.random() * 36)).toString(36)).join(\"\");\r\n\r\nexport const useWatchlist = () => {\r\n  const context = React.useContext(WatchlistContext);\r\n\r\n  if (!context) throw new Error(\"Expected to be wrapped in a WatchlistProvider\");\r\n\r\n  return context;\r\n};\r\n\r\nfunction reducer(state: WatchlistProviderState, action: Actions) {\r\n  switch (action.type) {\r\n    case \"SET_ITEMS\":\r\n      return generateWatchlistState(state, action.payload);\r\n\r\n    case \"ADD_ITEM\": {\r\n      const items = [...state.items, action.payload];\r\n\r\n      return generateWatchlistState(state, items);\r\n    }\r\n\r\n    case \"UPDATE_ITEM\": {\r\n      const items = state.items.map((item: Item) => {\r\n        if (item.id !== action.id) return item;\r\n\r\n        return {\r\n          ...item,\r\n          ...action.payload,\r\n        };\r\n      });\r\n\r\n      return generateWatchlistState(state, items);\r\n    }\r\n\r\n    case \"REMOVE_ITEM\": {\r\n      const items = state.items.filter((i: Item) => i.id !== action.id);\r\n\r\n      return generateWatchlistState(state, items);\r\n    }\r\n\r\n    case \"EMPTY_WATCHLIST\":\r\n      return initialState;\r\n\r\n    case \"CLEAR_WATCHLIST_META\":\r\n      return {\r\n        ...state,\r\n        metadata: {},\r\n      };\r\n\r\n    case \"SET_WATCHLIST_META\":\r\n      return {\r\n        ...state,\r\n        metadata: {\r\n          ...action.payload,\r\n        },\r\n      };\r\n\r\n    case \"UPDATE_WATCHLIST_META\":\r\n      return {\r\n        ...state,\r\n        metadata: {\r\n          ...state.metadata,\r\n          ...action.payload,\r\n        },\r\n      };\r\n\r\n    default:\r\n      throw new Error(\"No action specified\");\r\n  }\r\n}\r\n\r\nconst generateWatchlistState = (state = initialState, items: Item[]) => {\r\n  const totalUniqueItems = calculateUniqueItems(items);\r\n  const isEmpty = totalUniqueItems === 0;\r\n\r\n  return {\r\n    ...initialState,\r\n    ...state,\r\n    items: calculateItemTotals(items),\r\n    totalItems: calculateTotalItems(items),\r\n    totalUniqueItems,\r\n    //cartTotal: calculateTotal(items),\r\n    isEmpty,\r\n  };\r\n};\r\n\r\nconst calculateItemTotals = (items: Item[]) =>\r\n  items.map(item => ({\r\n    ...item,\r\n    itemTotal: item.price * item.quantity!,\r\n  }));\r\n\r\n//const calculateTotal = (items: Item[]) =>\r\n  //items.reduce((total, item) => total + item.quantity! * item.price, 0);\r\n\r\nconst calculateTotalItems = (items: Item[]) =>\r\n  items.reduce((sum, item) => sum + item.quantity!, 0);\r\n\r\nconst calculateUniqueItems = (items: Item[]) => items.length;\r\n\r\nexport const WatchlistProvider: React.FC<{\r\n  children?: React.ReactNode;\r\n  id?: string;\r\n  defaultItems?: Item[];\r\n  onSetItems?: (items: Item[]) => void;\r\n  onItemAdd?: (payload: Item) => void;\r\n  onItemUpdate?: (payload: object) => void;\r\n  onItemRemove?: (id: Item[\"id\"]) => void;\r\n  storage?: (\r\n    key: string,\r\n    initialValue: string\r\n  ) => [string, (value: Function | string) => void];\r\n  metadata?: Metadata;\r\n}> = ({\r\n  children,\r\n  id: watchlistId,\r\n  defaultItems = [],\r\n  onSetItems,\r\n  onItemAdd,\r\n  onItemUpdate,\r\n  onItemRemove,\r\n  storage = useLocalStorage,\r\n  metadata,\r\n}) => {\r\n  const id = watchlistId ? watchlistId : createWatchlistIdentifier();\r\n\r\n  const [savedWatchlist, saveWatchlist] = storage(\r\n    watchlistId ? `react-use-watchlist-${id}` : `react-use-watchlist`,\r\n    JSON.stringify({\r\n      id,\r\n      ...initialState,\r\n      items: defaultItems,\r\n      metadata,\r\n    })\r\n  );\r\n\r\n  const [state, dispatch] = React.useReducer(reducer, JSON.parse(savedWatchlist));\r\n  React.useEffect(() => {\r\n    saveWatchlist(JSON.stringify(state));\r\n  }, [state, saveWatchlist]);\r\n\r\n  const setItems = (items: Item[]) => {\r\n    dispatch({\r\n      type: \"SET_ITEMS\",\r\n      payload: items.map(item => ({\r\n        ...item,\r\n        quantity: item.quantity || 1,\r\n      })),\r\n    });\r\n\r\n    onSetItems && onSetItems(items);\r\n  };\r\n\r\n  const addItem = (item: Item, quantity = 1) => {\r\n    if (!item.id) throw new Error(\"You must provide an `id` for items\");\r\n    //if (quantity <= 0) return;\r\n\r\n    const currentItem = state.items.find((i: Item) => i.id === item.id);\r\n\r\n    //if (!currentItem && !item.hasOwnProperty(\"price\"))\r\n      //throw new Error(\"You must pass a `price` for new items\");\r\n\r\n    if (!currentItem) {\r\n      const payload = { ...item, quantity };\r\n\r\n      dispatch({ type: \"ADD_ITEM\", payload });\r\n\r\n      onItemAdd && onItemAdd(payload);\r\n\r\n      return;\r\n    }\r\n\r\n    const payload = { ...item, quantity: currentItem.quantity + quantity };\r\n\r\n    dispatch({\r\n      type: \"UPDATE_ITEM\",\r\n      id: item.id,\r\n      payload,\r\n    });\r\n\r\n    onItemUpdate && onItemUpdate(payload);\r\n  };\r\n\r\n  const updateItem = (id: Item[\"id\"], payload: object) => {\r\n    if (!id || !payload) {\r\n      return;\r\n    }\r\n\r\n    dispatch({ type: \"UPDATE_ITEM\", id, payload });\r\n\r\n    onItemUpdate && onItemUpdate(payload);\r\n  };\r\n\r\n  const updateItemQuantity = (id: Item[\"id\"], quantity: number) => {\r\n    if (quantity <= 0) {\r\n      onItemRemove && onItemRemove(id);\r\n\r\n      dispatch({ type: \"REMOVE_ITEM\", id });\r\n\r\n      return;\r\n    }\r\n\r\n    const currentItem = state.items.find((item: Item) => item.id === id);\r\n\r\n    if (!currentItem) throw new Error(\"No such item to update\");\r\n\r\n    const payload = { ...currentItem, quantity };\r\n\r\n    dispatch({\r\n      type: \"UPDATE_ITEM\",\r\n      id,\r\n      payload,\r\n    });\r\n\r\n    onItemUpdate && onItemUpdate(payload);\r\n  };\r\n\r\n  const removeItem = (id: Item[\"id\"]) => {\r\n    if (!id) return;\r\n\r\n    dispatch({ type: \"REMOVE_ITEM\", id });\r\n\r\n    onItemRemove && onItemRemove(id);\r\n  };\r\n\r\n  const emptyWatchlist = () =>\r\n    dispatch({\r\n      type: \"EMPTY_WATCHLIST\",\r\n    });\r\n\r\n  const getItem = (id: Item[\"id\"]) =>\r\n    state.items.find((i: Item) => i.id === id);\r\n\r\n  const inWatchlist = (id: Item[\"id\"]) => state.items.some((i: Item) => i.id === id);\r\n\r\n  const clearWatchlistMetadata = () => {\r\n    dispatch({\r\n      type: \"CLEAR_WATCHLIST_META\",\r\n    });\r\n  };\r\n\r\n  const setWatchlistMetadata = (metadata: Metadata) => {\r\n    if (!metadata) return;\r\n\r\n    dispatch({\r\n      type: \"SET_WATCHLIST_META\",\r\n      payload: metadata,\r\n    });\r\n  };\r\n\r\n  const updateWatchlistMetadata = (metadata: Metadata) => {\r\n    if (!metadata) return;\r\n\r\n    dispatch({\r\n      type: \"UPDATE_WATCHLIST_META\",\r\n      payload: metadata,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <WatchlistContext.Provider\r\n      value={{\r\n        ...state,\r\n        getItem,\r\n        inWatchlist,\r\n        setItems,\r\n        addItem,\r\n        updateItem,\r\n        updateItemQuantity,\r\n        removeItem,\r\n        emptyWatchlist,\r\n        clearWatchlistMetadata,\r\n        setWatchlistMetadata,\r\n        updateWatchlistMetadata,\r\n      }}\r\n    >\r\n      {children}\r\n    </WatchlistContext.Provider>\r\n  );\r\n};\r\n"],"names":["useLocalStorage","key","initialValue","React","window","localStorage","getItem","error","storedValue","setStoredValue","value","valueToStore","Function","setItem","console","log","initialState","items","isEmpty","totalItems","totalUniqueItems","metadata","WatchlistContext","createWatchlistIdentifier","len","Array","map","Math","random","toString","join","reducer","state","action","type","generateWatchlistState","payload","item","id","filter","i","Error","calculateUniqueItems","calculateItemTotals","calculateTotalItems","itemTotal","price","quantity","reduce","sum","length","children","watchlistId","defaultItems","onSetItems","onItemAdd","onItemUpdate","onItemRemove","storage","JSON","stringify","saveWatchlist","parse","dispatch","Provider","find","inWatchlist","some","setItems","addItem","currentItem","updateItem","updateItemQuantity","removeItem","emptyWatchlist","clearWatchlistMetadata","setWatchlistMetadata","updateWatchlistMetadata","context"],"mappings":"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"}